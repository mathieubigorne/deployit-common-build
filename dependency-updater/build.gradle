// TODO checkVersions should include the pom.xml in a project
apply plugin: 'idea'
apply from: 'projectsdata.gradle'
apply from: 'grouptasks.gradle'


buildscript {
  repositories { mavenCentral() }
  dependencies { classpath 'com.typesafe:config:1.2.0' }
}

gradle.buildStarted {
  inconsistencies = []
}
gradle.buildFinished { buildresult ->
  if(inconsistencies.size() > 0) {
    def msg = ""
    inconsistencies.each { repo, key, touchstoneValue, value ->
      msg += "\n\tRepository $repo: $key was $value while $touchstoneValue was expected"
    }
    throw new GradleException("${inconsistencies.size()} inconsistencies found:" + msg)
  }
}

def projectName(def name) {
  def parts = name.split('-')
  parts*.capitalize().join()
}

def updateProjectDependencyTaskName(def name) {
  "update${projectName(name)}Dependencies"
}

def updateProjectGradleTaskName(def name) {
  "update${projectName(name)}Gradle"
}

projectData.each { projData ->
  def repoName = projData.repoName
  def updateProjDepTask = task("${updateProjectDependencyTaskName(repoName)}") {
    group = "Single project update"
    description = "Update"
  }

  if( projData.toUpdate.contains('depcfg') ) {
    def updateDefCfgTask = defineUpdateDepCfgTask(repoName)
    defineUpdateProjectGradleTask(repoName)

    updateProjDepTask.dependsOn updateDefCfgTask
    updateProjDepTask.description += " gradle/dependencies.conf"
  }

  if( projData.toUpdate.contains('pom') ) {
    def updatePomTask = defineUpdatePomTask(repoName)
    updateProjDepTask.dependsOn updatePomTask
    updateProjDepTask.description += " pom.xml"
  }
}

////// Update targets, per repo

def defineUpdateDepCfgTask(repoName) {
  task "update${projectName(repoName)}DepCfg" (type: UpdateDependenciesConf) {
    group = "Single project gradle/dependency.conf update"

    repository = repoName
    contentPath = 'gradle/dependencies.conf'
  }
}

def defineUpdateProjectGradleTask(repoName) {
  task "${updateProjectGradleTaskName(repoName)}"(type: UpdateProjectGradle) {
    group = "Single project Gradle Wrapper Update"

    repository = repoName
    contentPath = 'gradle/wrapper/gradle-wrapper.properties'
  }
}

def defineUpdatePomTask(repoName) {
  task "update${projectName(repoName)}Pom" (type: UpdateProjectPom) {
    group = "Single project pom.xml update"

    repository = repoName
    contentPath = 'pom.xml'
  }
}

////// Check targets

task checkGradleWrappers(type: CheckProjectGradle) {
  repositoriesToCheck = projectData.findResults { it.toUpdate.contains('depcfg') ? it.repoName : null }
  contentPath = 'gradle/wrapper/gradle-wrapper.properties'

  group = "Version checks"
  description = "Check gradle wrapper versions are consistent across ${repositoriesToCheck.join(' ')}"
}

task checkVersions(type: CheckDependencyVersions) {
  repositoriesToCheck = projectData.grep{it.toUpdate.contains('depcfg')}.collect{it.repoName}
  contentPath = 'gradle/dependencies.conf'

  group = "Version checks"
  description = "Check dependency versions are consistent across ${repositoriesToCheck.join(' ')}"
}

